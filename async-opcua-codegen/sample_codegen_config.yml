# This file is intended for documentation purposes only,
# it includes every possible configuration option.

# Extra header to add to the top of each generated file, cross target.
extra_header: |
  //! Some extra header for each file
  //! It is simply added to the top of each file.
  mod ext_types {
    pub use my_other_crate::*;
  }

# Preferred locale for LocalizedText values in the generated code.
# Most schemas don't define more than one locale, but if they do,
# this can choose which one to use.
preferred_locale: en

# Note that all paths are relative to the location of this config file.

sources:
  # Strings are used to implicitly load schemas.
  # Folders are loaded recursively. Files are interpreted based on their extension.
  - schemas/
  - other-schemas/My.NodeSet2.xml
  # You can also specify which type of target it is directly.
  - type: xml-schema
    path: more-schemas/Schema.xsd
  - type: node-set
    path: more-schemas/NodeSet2.xml
  # Note that binary schemas are deprecated in the OPC-UA standard. Newer
  # extensions generally use NodeSet2 XML files for type definitions instead.
  - type: binary-schema
    path: more-schemas/BinarySchema.bsd

# Each target is one batch of generated rust code for a specific purpose.
targets:
  # Types are rendered as Rust structs/enums, and loaded from either NodeSet2 files or
  # BSD files.
  - type: types
    # A reference to the file. This can be the path, filename, or primary namespace URI.
    file: schemas/MySchema.NodeSet2.xml
    # The root directory to place the generated code in.
    output_dir: src/generated/types
    # Optional list of types to ignore
    ignore:
      - MyIgnoredType
      - MyOtherIgnoredType
    # Map of external types to import. This is used, for example, to
    # include the types in `ignore`.
    types_import_map:
      MyIgnoredType:
        # Path to the module containing this type, for import.
        path: crate::types
        # Whether this type has a `default` implementation.
        has_default: true
        # Base type, which is used to determine how to encode/decode this type.
        # Set this to `ExtensionObject` if it is a structure.
        base_type: "ExtensionObject"
        # Whether to add this type to the type loader. This is generally needed
        # for types that are deserialized from ExtensionObjects.
        add_to_type_loader: true
        # Rust expressions for each encoding type. You can leave this out
        # if you have a proper CSV ID type for this.
        # Any of these can be left out, in which case the type simply won't be decodable
        # in the relevant format. The data_type is required, however.
        ids:
          data_type: 16
          binary: 15
          xml: 14
          json: 13
    
    # Types that should not have a `Default` implementation generated.
    # If you use this, you must implement `Default` yourself for these types.
    default_excluded:
      - HasNoDefault
      - OtherTypeWithoutDefault
    
    # Whether to put all enums in a single file, or one file per enum.
    enums_single_file: true

    # Whether to put all structs in a single file, or one file per struct.
    structs_single_file: false

    # Extra header to put after the global extra header to each file generated by this target.
    extra_header: |
      // Some extra header
    
    # Rust path to the module containing node ID enums to use. Defaults to just `crate`.
    id_path: crate::generated::node_ids

    # Whether to generate node ID enums from the nodeset file itself, instead of
    # relying on the node ID from `id_path`.
    # This is useful if the nodeset lacks node ID CSV files, or those files are incomplete.
    node_ids_from_nodeset: false

  # This target generates code to generate nodes that are added to the server address space.
  # Each node in the NodeSet2 file creates a function, which is then called from
  # a large iterator that can be used as a a node set source.
  # Note that this should not be used on very large nodeset2 files, as this will
  # create abysmal compile times.
  - type: nodes
    # A reference to the file. This can be the path, filename, or primary namespace URI.
    file: my.namespace.uri
    # The root directory to place the generated code in.
    output_dir: src/generated/nodes
    # Maximum number of nodes to write per file.
    # Avoid setting this too high or low, as that can create very bad compile times.
    # 100 is a reasonable default.
    max_nodes_per_file: 100
    # List of XML files to load types from.
    types:
        # This can be a path, filename, or primary namespace URI.
      - source: schemas/MySchema.Types.xsd
        # Rust path to import these types from.
        root_path: crate::types
    # Name of the generated module.
    name: MyNamespace
    # Extra header to put after the global extra header to each file generated by this target.
    extra_header: |
      // Some extra header
    # Optional target for generating event types. This will create structs for
    # each event type in the nodeset, which all implement the `Event` trait.
    # To do this, it also generates types for some `ObjectType`s and `VariableType`s,
    # which are used as event fields.
    events:
      # Root directory to place the generated event types in.
      output_dir: src/generated/events
      # Extra header to put after the global extra header to each file generated by this target.
      extra_header: |
        // Some extra header for events
      # List of dependent nodesets to load events and event fields from.
      # This typically needs to include the core namespace.
      dependent_nodesets:
        - file: Opc.Ua.NodeSet2.xml
          # Path to import the events from.
          import_path: "opcua::core_namespace::events::"
  # Target for generating node ID enums based on CSV files.
  - type: ids
    # Path to the CSV file, relative to this config file.
    file_path: schemas/NodeIds.csv
    # File to write the generated code to.
    output_file: src/generated/node_ids.rs
    # Extra header to put after the global extra header to the generated file.
    extra_header: |
      // Some extra header for node IDs
    # Type name, used if the CSV file has only two columns.
    # If the CSV file has three columns, this is not needed.
    type_name: ObjectId
